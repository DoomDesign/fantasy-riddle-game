/* You can add global styles to this file, and also import other style files */
@import '~modern-normalize/modern-normalize.css';

* {
	// outline: 1px solid rgba(red, .3);
}

@mixin center-contents {
	display: grid;
	grid-template-columns: 1fr;
	grid-template-rows: 1fr;
	place-items: center;
}

[hidden] {
	display: none !important;
}

html {font-size: 100%;}

body {
	overflow: hidden;
	background-color: #000;

}


h1, h2, h3, h4, h5 {
	margin: 3rem 0 1.38rem;
	font-family: Garamond,Baskerville,Baskerville Old Face,Hoefler Text,Times New Roman,serif;
	font-weight: bold;
	margin-top: 0;
	font-weight: 400;
	line-height: 1.3;
}

h1 {
	margin-top: 0;
	font-size: 3.052rem;
}

h2 {font-size: 2.441rem;}

h3 {font-size: 1.953rem;}

h4 {font-size: 1.563rem;}

h5 {font-size: 1.25rem;}

small, .text_small {font-size: 0.8rem;}

dialog {
	position: fixed;
	// z-index: 9999;
	max-height: calc(100vh - 4rem);
	overflow: auto;
	background-color: #000;
	color: #fff;
	margin: auto;
	border-color: #444;
	border-radius: .5rem;
	padding: 2rem;

	max-width: 80ch;

	opacity: 0;
	transition: opacity .5s;

	&[open] {
		opacity: 1;
	}

	&::backdrop {
		display: block;
		position: fixed;
		top: 0px;
		right: 0px;
		bottom: 0px;
		left: 0px;
		z-index: 9990;
		background-color: rgba(black, .3);
		backdrop-filter: blur(5px);
	}

	button {
		appearance: none;
		-webkit-appearance: none;

		width: 100%;
		background: #222;
		color: #999;
		border: 0;
		margin: 0;
		padding: 1rem;
		border-radius: .5rem;

		cursor: pointer;

		&:hover,
		&:focus {
			background: #111;
			color: #fff;
		}
	}
}

.game-controller {
	position: fixed;
	top: 2vw;
	left: 2vw;

	z-index: 9999;

	display: flex;
	gap: 1rem;

	> button {
		appearance: none;
		-webkit-appearance: none;

		border: 0;
		margin: 0;
		padding: 1rem;
		border-radius: .5rem;
		background: #000;
		color: #999;


		&:not(.disabled, :disabled, [disabled]) {
			cursor: pointer;

			&:hover,
			&:focus {
				color: #fff;

				svg {
					--svg-color: #fff;
				}
			}
		}

		svg {
			height: 1rem;
			width: 1rem;

			--svg-color: #999;

			> .stroke {
				stroke: var(--svg-color) !important;
			}
			> .fill {

				fill: var(--svg-color) !important;
			}
		}
	}

}

.container {
	width: 100vw;
	height: 100vh;
	padding: 2rem;

	background: url(assets/img/screen-bg.jpg) center center no-repeat;
	background-size: cover;

	position: relative;

	@include center-contents();

	transition: opacity 2s;

	&.fadeOut {
		opacity: 0;
	}

	&.shake {
		animation-name: shake-little;
		animation-duration: 100ms;
		animation-timing-function: ease-in-out;
		animation-iteration-count: infinite;
	}

	.lightmap-overlay {
		position: absolute;
		z-index: 9999;
		pointer-events: none;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background: url(assets/img/lightmap.jpg) center center no-repeat;
		background-size: cover;

		mix-blend-mode: overlay;
	}

	.lightfx-overlay {
		pointer-events: none;
		z-index: 9999;
		mix-blend-mode: screen;

		position: absolute;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;

		> * {
			position: absolute;
			top: 50%;
			left: 50%;
			width: 100%;
			height: auto;

			background-position: center center;
			background-size: auto 100%;

			transform: translateX(-50%) translateY(-50%);
		}

		// .fx01 {
		// 	background-image: url(assets/img/fx_light01.png);
		// }
		// .fx02 {
		// 	background-image: url(assets/img/fx_light02.png);
		// }
		// .fx03 {
		// 	background-image: url(assets/img/fx_light03.png);
		// }
	}

}

.game {
	aspect-ratio: 1;
	height: 100%;
	// background-color: black;

	position: relative;

	@include center-contents();
}

.outer_circle {
	// background-color: darkgray;
	width: 100%;
	height: 100%;

	position: relative;

	background:  url(assets/img/rings.png) center center no-repeat;
	background-size: 88%;

	@include center-contents();

	> .position {

		--translate-x: 0;
		--translate-y: 0;

		transform: translateX(var(--translate-x)) translateY(var(--translate-y));

		&-1 {
			top: 0;
			left: 50%;
			--translate-x: -50%;
		}
		&-3 {
			top: 50%;
			right: 0;
			--translate-y: -50%;
		}
		&-5 {
			bottom: 0;
			left: 50%;
			--translate-x: -50%;
		}
		&-7 {
			top: 50%;
			left: 0;
			--translate-y: -50%;
		}
	}
}

.inner_circle {
	--inner-circle-size: 64%;
	width: var(--inner-circle-size);
	height: var(--inner-circle-size);

	position: relative;

	@include center-contents();

	.circle,
	.positions-circle,
	.circle-lightoverlay {
		position: absolute;
		top: 0;
		left: 0;

		width: 100%;
		height: 100%;


		transform: rotate(var(--turn-degree));

	}

	.circle-lightoverlay {
		border-radius: 100vmax;

		box-shadow: inset 0px 6px 3px 0px rgba(white, .16),
					inset 0px -10px 5px 0px rgba(black, .6);

		z-index: 100;
		pointer-events: none;
	}
	.circle {
		transition: all var(--turn-speed-seconds);
		border-radius: 100vmax;

		background: url(assets/img/center-disc.png);
		background-size: 100%;

		// border: 3px dotted black;
		// background: linear-gradient(to bottom, red, black);

		// background: url(https://source.unsplash.com/random) center center;
		// background-size: cover;
	}

	.positions-circle {
		z-index: 100;


		&.isTurning {
			transition: all var(--turn-speed-seconds);
		}
	}

	.position {
		// transition: all var(--pos-turn-speed-seconds);
		transform: rotate(var(--pos-turn-degree));

		&.isTurning {
			transition: all var(--turn-speed-seconds);
		}

		--position-circle-offset: 5.5%;

		&-8 {
			top: var(--position-circle-offset);
			left: var(--position-circle-offset);
		}
		&-2 {
			top: var(--position-circle-offset);
			right: var(--position-circle-offset);
		}
		&-4 {
			bottom: var(--position-circle-offset);
			right: var(--position-circle-offset);
		}
		&-6 {
			bottom: var(--position-circle-offset);
			left: var(--position-circle-offset);
		}
	}
}

.position {
	position: absolute;

	background: url(assets/img/position-circle-bg.png) center center no-repeat;
	background-size: 100%;

	border: 0;

	width: 7vw;
	aspect-ratio: 1;
	border-radius: 100vmax;

	@include center-contents();

	overflow: visible;

	color: #fff;

	text-align: center;
	line-height: 1;



	&::after {
		display: block;
		pointer-events: none;
		content: '';
		position: absolute;
		top: 50%;
		left: 50%;
		width: 80%;
		height: 80%;
		border-radius: 100vmax;

		opacity: 0;

		transition: opacity .5s, background-color .5s, box-shadow .5s;
		transform: translateX(-50%) translateY(-50%);

		box-shadow:
			inset 0px 0px 0px 0px transparent,
			inset 0px 0px 0px 0px transparent,
			0px 0px 0px 0px transparent,
			0px 0px 0px 0px transparent,
			0px 0px 0px 0px transparent
		;
	}

	&:not(:disabled, [disabled]) {
		cursor: pointer;
	}

	&:hover {

		&:not(.error, .success, :disabled, [disabled]) {
			span.label {
				opacity: 0;
			}
			&::after {
				opacity: 1;
				animation: highlightedAni 5s infinite;
				animation-timing-function: linear;
			}
		}
	}
	&.isSelected {

		span.label {
			opacity: 0;
		}
		&::after {
			opacity: 1;
			animation: highlightedAni 5s infinite;
			animation-timing-function: linear;
		}

	}

	&.error {
		&::after {
			opacity: 1;
			box-shadow:
						inset 0px 0px 1px 2px orange,
						inset 0px 0px 20px red,
						0px 0px 1px 2px orange,
						0px 0px 20px red,
						0px 0px 50px darkred
						;
		}
	}

	&.success {
		&::after {
			opacity: 1;
			animation: successAni 1s linear;
		}
	}

	&.isPossible {
		&:not(:hover) {
			&::after {
				opacity: 1;
				animation: markPossible 5s infinite;
				animation-timing-function: linear;
			}
		}

	}

	span.label {
		opacity: 1;
		transition: opacity .5s;
		// background-color: black;
		padding: .25rem;
		font-size: 1rem;
		position: absolute;
		bottom: 0;
		color: white;
		text-shadow: 0 0 3px aqua, 0 0 6px blue;
		// opacity: .5;
		text-transform: uppercase;
		font-size: .7rem;
		z-index: 10;
	}

	img.icon {
		width: auto;
		height: 60%;
		position: absolute;
		top: 50%;
		left: 50%;
		transform: translateX(-50%) translateY(-50%);
	}

	span.debug {
		font-size: 1vw;
		position: absolute;
		opacity: .5;
		background-color: white;
		border-radius: 100vmax;
		overflow: hidden;
		width: 1.5vw;
		height: 1.5vw;
		display: grid;
		place-content: center;
		top: 0;
		left: 50%;
		color: black;
		transform: translateX(-50%);

		// display: none;
	}
}

.circle-controller {
	$scale: (2/3);
	position: absolute;

	width: 377px * $scale;
	height: 377px * $scale;

	background: url(assets/img/rotation-buttons-bg.png) center center no-repeat;
	background-size: contain;

	border-radius: 100vmax;

	z-index: 1000;

	@include center-contents();

	.buttons {
		display: flex;
		gap: 14px * $scale;
		flex-wrap: nowrap;

		> button {
			appearance: none;
			-webkit-appearance: none;

			padding: 0;
			margin: 0;

			border: 0;
			width: 155px * $scale;
			height: 311px * $scale;

			position: relative;


			transition: background-size .5s;

			// background-color: tomato !important;



			&::after {
				content: '';
				display: block;
				pointer-events: none;
				position: absolute;
				top: 0;
				left: 0;
				width: 100%;
				height: 100%;

				opacity: 0;
				transition: opacity .25s, background-size .5s;
			}

			&:not(:disabled, [disabled]) {
				cursor: pointer;

				&:hover {
					&::after {
						opacity: 1;
					}
				}
				&:focus {
					background-size: 90% auto;
					&::after {
						background-size: 90% auto;
					}
				}
			}

			&.button-turn_ccw {

				clip-path: polygon(100% 0%, 100% 100%, 0% 50%);

				background: url(assets/img/arrow_ccw.png) center center no-repeat;
				background-size: contain;

				&::after {
					background: url(assets/img/arrow_ccw_hover.png) center center no-repeat;
					background-size: contain;
				}
			}
			&.button-turn_cw {

				clip-path: polygon(0% 0%, 100% 50%, 0% 100%);

				background: url(assets/img/arrow_cw.png) center center no-repeat;
				background-size: contain;

				&::after {
					background: url(assets/img/arrow_cw_hover.png) center center no-repeat;
					background-size: contain;
				}
			}
		}

	}


}

@keyframes highlightedAni {

	0%, 100% {
		box-shadow:
					inset 0px 0px 1px 2px rgba(aqua, .5),
					inset 0px 0px 20px rgba(blue, .5),
					0px 0px 1px 2px rgba(aqua, .5),
					0px 0px 20px rgba(blue, .5),
					0px 0px 50px rgba(darkblue, .5)
					;
	}
	50% {
		box-shadow:
					inset 0px 0px 1px 2px rgba(white, 1),
					inset 0px 0px 20px rgba(aqua, 1),
					0px 0px 1px 2px rgba(white, 1),
					0px 0px 20px rgba(aqua, 1),
					0px 0px 50px rgba(darkblue, 1)
					;
	}
}

@keyframes markPossible {

	0%, 100% {
		box-shadow:
		inset 0px 0px 5px 2px rgba(dodgerblue, .3),
		inset 0px 0px 30px rgba(darkblue, .3),
		0px 0px 10px 2px rgba(dodgerblue, .3),
		0px 0px 40px rgba(darkblue, .3),
					// 0px 0px 50px 30px transparent
					;
	}
	50% {
		box-shadow:
					inset 0px 0px 5px 2px rgba(dodgerblue, .7),
					inset 0px 0px 30px rgba(darkblue, .7),
					0px 0px 10px 2px rgba(dodgerblue, .7),
					0px 0px 40px rgba(darkblue, .7),
					// 0px 0px 50px darkblue
					;
	}
}

@keyframes successAni {
	0% {
		background-color: white;
		box-shadow:
					0px 0px 1px 2px rgba(white, 1),
					0px 0px 20px rgba(aqua, 1),
					0px 0px 50px rgba(darkblue, 1)
					;
	}
	100% {
		background-color: transparent;
		box-shadow:
					0px 0px 20px 2px rgba(white, 0),
					0px 0px 40px rgba(aqua, 0),
					0px 0px 100px rgba(darkblue, 0)
					;
	}
}

@keyframes shake-little {
	2% {
	  transform: translate(0px, 1px) ; }
	4% {
	  transform: translate(0px, 1px) ; }
	6% {
	  transform: translate(1px, 1px) ; }
	8% {
	  transform: translate(0px, 0px) ; }
	10% {
	  transform: translate(1px, 0px) ; }
	12% {
	  transform: translate(1px, 1px) ; }
	14% {
	  transform: translate(0px, 0px) ; }
	16% {
	  transform: translate(1px, 0px) ; }
	18% {
	  transform: translate(0px, 1px) ; }
	20% {
	  transform: translate(0px, 1px) ; }
	22% {
	  transform: translate(1px, 1px) ; }
	24% {
	  transform: translate(0px, 1px) ; }
	26% {
	  transform: translate(0px, 0px) ; }
	28% {
	  transform: translate(1px, 0px) ; }
	30% {
	  transform: translate(1px, 0px) ; }
	32% {
	  transform: translate(0px, 1px) ; }
	34% {
	  transform: translate(0px, 1px) ; }
	36% {
	  transform: translate(0px, 0px) ; }
	38% {
	  transform: translate(1px, 1px) ; }
	40% {
	  transform: translate(1px, 0px) ; }
	42% {
	  transform: translate(0px, 1px) ; }
	44% {
	  transform: translate(0px, 1px) ; }
	46% {
	  transform: translate(0px, 0px) ; }
	48% {
	  transform: translate(0px, 1px) ; }
	50% {
	  transform: translate(0px, 1px) ; }
	52% {
	  transform: translate(1px, 1px) ; }
	54% {
	  transform: translate(0px, 0px) ; }
	56% {
	  transform: translate(0px, 0px) ; }
	58% {
	  transform: translate(0px, 0px) ; }
	60% {
	  transform: translate(0px, 1px) ; }
	62% {
	  transform: translate(0px, 0px) ; }
	64% {
	  transform: translate(1px, 0px) ; }
	66% {
	  transform: translate(0px, 1px) ; }
	68% {
	  transform: translate(0px, 0px) ; }
	70% {
	  transform: translate(1px, 1px) ; }
	72% {
	  transform: translate(1px, 0px) ; }
	74% {
	  transform: translate(0px, 1px) ; }
	76% {
	  transform: translate(0px, 1px) ; }
	78% {
	  transform: translate(1px, 0px) ; }
	80% {
	  transform: translate(1px, 0px) ; }
	82% {
	  transform: translate(0px, 0px) ; }
	84% {
	  transform: translate(1px, 0px) ; }
	86% {
	  transform: translate(0px, 0px) ; }
	88% {
	  transform: translate(0px, 0px) ; }
	90% {
	  transform: translate(1px, 1px) ; }
	92% {
	  transform: translate(1px, 1px) ; }
	94% {
	  transform: translate(1px, 0px) ; }
	96% {
	  transform: translate(1px, 0px) ; }
	98% {
	  transform: translate(0px, 0px) ; }
	0%, 100% {
	  transform: translate(0, 0) rotate(0); } }